[{"C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\index.js":"1","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\App.js":"2","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\reportWebVitals.js":"3","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\page\\View.js":"4","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\theme.js":"5","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\components\\CreateProjectModal.js":"6","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\components\\PayModal.js":"7","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\Context.js":"8"},{"size":761,"mtime":1609332849748,"results":"9","hashOfConfig":"10"},{"size":369,"mtime":1609241772318,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":5311,"mtime":1609355545410,"results":"13","hashOfConfig":"10"},{"size":306,"mtime":1609344086433,"results":"14","hashOfConfig":"10"},{"size":8140,"mtime":1609347916994,"results":"15","hashOfConfig":"10"},{"size":5522,"mtime":1609355402871,"results":"16","hashOfConfig":"10"},{"size":654,"mtime":1609342828132,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"yq9r1l",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\index.js",[],["38","39"],"C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\App.js",[],"C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\reportWebVitals.js",[],"C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\page\\View.js",["40"],"C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\theme.js",[],"C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\components\\CreateProjectModal.js",["41","42","43","44"],"import React,{useState,useContext,useEffect} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { Grid, Typography, Divider, Button } from \"@material-ui/core\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n    DatePicker,MuiPickersUtilsProvider\r\n  } from '@material-ui/pickers';\r\n  import DateFnsUtils from '@date-io/date-fns';\r\n  import { UserContext } from \"../Context\";\r\nimport axios from 'axios'\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 420,\r\n    outline: \"none\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: \"40px 40px\",\r\n    boxShadow: theme.shadows[5],\r\n    borderRadius: \" 6px\",\r\n  },\r\n  header: {\r\n    paddingBottom: \"20px\",\r\n  },\r\n  heading: {},\r\n  icon: {\r\n    marginTop: \"5px\",\r\n    marginRight: \"0px\",\r\n    cursor: \"pointer\"\r\n  },\r\n  input: {\r\n    border: \"2px solid #ededed\",\r\n    marginTop: \"20px\",\r\n    width: \"330px\",\r\n    height: \"45px\",\r\n    padding: \"10px\",\r\n    borderRadius: \"4px\",\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n    \" &::placeholder\": {\r\n      fontSize: \"16px\",\r\n      color: \"#ccc\",\r\n      fontWeight: \"400\",\r\n      letterSpacing: \".2px\",\r\n      fontFamily: \"Inter\",\r\n    },\r\n  },\r\n  textarea: {\r\n    height: \"100px\",\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  price: {\r\n    marginTop: \"15px\",\r\n    padding: \"2px 8px\",\r\n  },\r\n  textFont: {\r\n    color: \"#a3a3a3\",\r\n    fontSize: \"17px\",\r\n    fontWeight: \"500\",\r\n  },\r\n  priceFont: {\r\n    color: \"#b8b6b6\",\r\n    fontSize: \"16px\",\r\n    fontWeight: \"400\",\r\n  },\r\n  button:{\r\n      padding: '10px 25px',\r\n      marginTop: '20px',\r\n      backgroundColor:'#0276FD'\r\n  },\r\n  span:{\r\n    color: \"#ff0033\",\r\n    fontSize: '11px',\r\n    marginLeft: '10px'\r\n  },\r\n  underline: {\r\n    \"& .MuiInput-underline:before\": {\r\n      borderBottom: \"none\"\r\n    },\r\n    \"&:hover .MuiInput-underline:before\": {\r\n        borderBottom: \"none\"\r\n      },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottom: \"none\"\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function CreateProjectModal({ open, setOpen ,pay ,setPay}) {\r\n    const { handleSubmit, register, errors } = useForm({});\r\n  const classes = useStyles();\r\n  const [date, setDate] = useState(new Date());\r\n  const cont =  useContext(UserContext)\r\n\r\n  \r\n\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [state, setState] = React.useState({\r\n    name: \"\",\r\n    summary: \"\",\r\n    cost: 0\r\n  })\r\n  const [fees, setFees]= useState(0)\r\n  const [amount, setAmount]= useState(0)\r\n  \r\n  let total = 0\r\n  \r\n\r\n  const { name,summary,cost} = state\r\n  function handleChange(evt) {\r\n    const value = evt.target.value;\r\n    setState({\r\n      ...state,\r\n      [evt.target.name]: value\r\n    });\r\n   \r\n  \r\n  }\r\n  useEffect(() => {\r\n    const taxAmount = (20 / 100) * cost;\r\n    setFees(taxAmount);\r\n    setAmount(Number(cost) + Number(taxAmount));\r\n  },[cost]);\r\n\r\n  \r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  const onSubmit = async() =>{\r\n\r\n     const { data } = await axios.post('http://localhost:3000/project',\r\n     {name, summary ,date,cost})\r\n     \r\n  // cont.dispatch({\r\n  //   type: \"SET_DATA\",\r\n  //   payload: {name,summary,cost,date}\r\n  // }\r\n  const t =  (cost / 100) * 20 \r\n  setAmount(  )\r\n  cont.setTax(amount)\r\n  handleClose()\r\n  \r\n  setPay(!pay)\r\n\r\n   }\r\n  const handleDate = ( ) =>{\r\n      \r\n  }\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <Grid\r\n        container\r\n        className={classes.header}\r\n        alignItems=\"center\"\r\n        justify=\"space-between\"\r\n      >\r\n        <Grid item></Grid>\r\n        <Grid item>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\">\r\n            Create Project\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={classes.icon} onClick={handleClose}>\r\n          <ClearIcon />\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <Grid container></Grid>\r\n      <Grid container className={classes.form}>\r\n        <form onSubmit={handleSubmit(onSubmit)}> \r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignitem=\"center\"\r\n            justify=\"center\"\r\n          >\r\n            <Grid item>\r\n              <input placeholder=\"Title\" name='name' onChange={handleChange} className={classes.input} ref={register({ required: true, maxLength: 10 })} />\r\n              {errors.name?.type === \"required\" && <span className={classes.span}> Title cannot be empty </span>}\r\n      {errors.name?.type === \"maxLength\" && <span className={classes.span}> Your input exceed maximun length </span>}\r\n            </Grid>\r\n            <Grid item>\r\n              <textarea\r\n                placeholder=\"Description\"\r\n                className={`${classes.input}  ${classes.textarea}`} onChange={handleChange} name='summary' ref={register({ required: true, maxLength: 200 })}\r\n              />\r\n               {errors.summary?.type === \"required\" && <span className={classes.span}> Description cannot be empty </span>}\r\n      {errors.summary?.type === \"maxLength\" && <span className={classes.span}>Your input exceed maximun length </span>}\r\n            </Grid>\r\n            <Grid item>\r\n              <input\r\n                placeholder=\"Upload Attachment\"\r\n                name='Upload'\r\n                className={classes.input} ref={register} \r\n              disabled/>\r\n            </Grid>\r\n            <Grid item>\r\n            <MuiPickersUtilsProvider todayLabel    utils={DateFnsUtils}>\r\n            <DatePicker minDate={new Date()}     className={`${classes.input} ${classes.underline}`} value={date}  onChange={ () => setDate(date)}/>\r\n            </MuiPickersUtilsProvider>\r\n            </Grid>\r\n            <Grid item>\r\n              <input placeholder=\"cost Cost\" onChange={handleChange} name='cost'className={classes.input}ref={register({required: true, min: 100, max: 10000})} />\r\n              {errors.cost && <span className={classes.span}> Cost must be between 100-100000 </span>}\r\n\r\n            </Grid>\r\n          </Grid>\r\n       \r\n      <Grid container className={classes.price}>\r\n        <Grid container justify=\"space-between\" alignItems=\"center\">\r\n          <Grid item>\r\n            <Typography className={classes.textFont} variant=\"subtitle1\">\r\n              CleverX transaction fees(20%)\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item sm></Grid>\r\n          <Grid item>\r\n            <Typography className={classes.priceFont} variant=\"subtitle1\">\r\n             {`$ ${fees}.0`}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justify=\"space-between\" alignItems=\"center\">\r\n          <Grid item>\r\n            <Typography className={classes.textFont} variant=\"subtitle1\">\r\n              Total amount in $USD\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item sm></Grid>\r\n          <Grid item>\r\n            <Typography className={classes.priceFont} variant=\"subtitle1\">\r\n            {`$ ${ amount}.0`}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid></Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container className={classes.price} justify='center'>\r\n        <Button className={classes.button}  type='submit' variant=\"contained\" color=\"primary\">\r\n         Create project\r\n        </Button>\r\n      </Grid>\r\n      </form>\r\n      </Grid>\r\n     \r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"center\">\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\components\\PayModal.js",["45","46","47","48"],"import React, { useState,useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { Grid, Typography, Divider, Button, Hidden } from \"@material-ui/core\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { UserContext } from \"../Context\";\r\n\r\nimport IMG from \"../img/VBM_COF.png\";\r\nimport CircleChecked from \"@material-ui/icons/CheckCircleOutline\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 490,\r\n    outline: \"none\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: \"40px 40px\",\r\n    boxShadow: theme.shadows[5],\r\n    borderRadius: \" 6px\",\r\n  },\r\n  header: {\r\n    paddingBottom: \"20px\",\r\n  },\r\n  heading: {},\r\n  icon: {\r\n    marginTop: \"5px\",\r\n    marginRight: \"0px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  arrow: {\r\n    color: \"#0276FD\",\r\n  },\r\n  box: {\r\n    marginTop: \"25px\",\r\n    padding: \"5px 16px\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    border: \"2px solid #ededed\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  check: {\r\n    color: \"#43a047\",\r\n  },\r\n  visa: {\r\n    width: \"70px\",\r\n    marginLeft: \"4px\",\r\n  },\r\n  priceFont: {\r\n    color: \"#b8b6b6\",\r\n    fontSize: \"16px\",\r\n    fontWeight: \"500\",\r\n    justifySelf: \"flex-end\",\r\n    marginBottom: \"3px\",\r\n  },\r\n  imgbox: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  select: {\r\n    border: \"2px solid #0276FD\",\r\n  },\r\n  hidden: {\r\n    display: \"hidden\",\r\n    color: \"#fff\",\r\n  },\r\n  add: {\r\n    marginBottom: \"0\",\r\n    fontSize: \"20px\",\r\n    marginLeft: \"20px\",\r\n    padding: \"4px 10px\",\r\n  },\r\n  button:{\r\n    padding: '10px 25px',\r\n    marginTop: '20px',\r\n    backgroundColor:'#0276FD',\r\n    \r\n},\r\nbtgird:{\r\n    paddingTop: '80px'\r\n}\r\n}));\r\n\r\nexport default function PayModal({ pay, setPay }) {\r\n  const classes = useStyles();\r\n  const cont =  useContext(UserContext)\r\n\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [check, setCheck] = React.useState(true);\r\n\r\n  const handleClose = () => {\r\n    \r\n    setPay(false);\r\n  };\r\n  const handleSubmit =  () => {\r\n    cont.fetch()\r\n    handleClose();\r\n  };\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <Grid\r\n        container\r\n        className={classes.header}\r\n        alignItems=\"center\"\r\n        justify=\"space-between\"\r\n      >\r\n        <Grid item>\r\n          <ArrowBackIcon className={classes.arrow} />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\">\r\n           Choose Card\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={classes.icon} onClick={handleClose}>\r\n          <ClearIcon />\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <div style={{ marginTop: \"50px\" }}>\r\n        <div\r\n          className={\r\n            check ? `${classes.box} ${classes.select}` : `${classes.box}`\r\n          }\r\n          onClick={() => setCheck(true)}\r\n        >\r\n          <div item className={classes.imgbox}>\r\n            {check ? (\r\n              <CircleChecked className={classes.check} />\r\n            ) : (\r\n              <CircleChecked className={classes.hidden} />\r\n            )}\r\n            <img src={IMG} className={classes.visa} />\r\n          </div>\r\n\r\n          <div>\r\n            <Typography variant=\"subtitle1\" className={classes.priceFont}>\r\n              Visa credit card ending with 5453\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={\r\n            !check ? `${classes.box} ${classes.select}` : `${classes.box}`\r\n          }\r\n          onClick={() => setCheck(false)}\r\n        >\r\n          <div item className={classes.imgbox}>\r\n            {!check ? (\r\n              <CircleChecked className={classes.check} />\r\n            ) : (\r\n              <CircleChecked className={classes.hidden} />\r\n            )}\r\n\r\n            <img src={IMG} className={classes.visa} />\r\n          </div>\r\n\r\n          <div>\r\n            <Typography variant=\"subtitle1\" className={classes.priceFont}>\r\n              Visa credit card ending with 6234\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n        <div className={classes.box}>\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            className={`${classes.priceFont} ${classes.add}`}\r\n            style={{\r\n              marginBottom: \"0\",\r\n              fontSize: \"20px\",\r\n              marginLeft: \"20px\",\r\n              padding: \"4px 10px\",\r\n            }}\r\n          >\r\n            + Add Card\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n      <Grid className={classes.btgird} container justify='center'>\r\n      <Button className={classes.button}  type='submit' variant=\"contained\" onClick={  handleSubmit} >\r\n         Pay\r\n        </Button>\r\n        </Grid>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"center\">\r\n      <Modal\r\n        open={pay}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\notSakib\\Desktop\\miniproject\\client\\src\\Context.js",["49"],"import React, { useState } from \"react\";\r\n\r\n\r\nimport axios from \"axios\";\r\nexport const UserContext = React.createContext();\r\n\r\n\r\nexport const Context = ({ children }) => {\r\n  const initialState = {\r\n    name: \"\",\r\n    summary: \"\",\r\n    cost: 0,\r\n    date: \"\",\r\n  };\r\n  const [api, setApi] =useState()\r\n  const [tax, setTax] =useState(0)\r\n  const fetch = async () => {\r\n    const { data } = await axios.get(\"http://localhost:3000/project\");\r\n    setApi(data)\r\n  };\r\n\r\nconsole.log(api)\r\n  \r\n  const value = {\r\n    api,fetch,setTax,tax\r\n  };\r\n\r\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\r\n};\r\n\r\nexport default Context;\r\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":61,"column":5,"nodeType":"56","messageId":"57","endLine":61,"endColumn":14},{"ruleId":"58","severity":1,"message":"59","line":126,"column":7,"nodeType":"60","messageId":"61","endLine":126,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":153,"column":14,"nodeType":"60","messageId":"61","endLine":153,"endColumn":18},{"ruleId":"58","severity":1,"message":"63","line":160,"column":9,"nodeType":"60","messageId":"61","endLine":160,"endColumn":10},{"ruleId":"58","severity":1,"message":"64","line":168,"column":9,"nodeType":"60","messageId":"61","endLine":168,"endColumn":19},{"ruleId":"58","severity":1,"message":"65","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"66","line":4,"column":45,"nodeType":"60","messageId":"61","endLine":4,"endColumn":51},{"ruleId":"67","severity":1,"message":"68","line":148,"column":13,"nodeType":"69","endLine":148,"endColumn":55},{"ruleId":"67","severity":1,"message":"68","line":170,"column":13,"nodeType":"69","endLine":170,"endColumn":55},{"ruleId":"58","severity":1,"message":"70","line":9,"column":9,"nodeType":"60","messageId":"61","endLine":9,"endColumn":21},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-dupe-keys","Duplicate key 'marginTop'.","ObjectExpression","unexpected","no-unused-vars","'total' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'t' is assigned a value but never used.","'handleDate' is assigned a value but never used.","'useState' is defined but never used.","'Hidden' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'initialState' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]